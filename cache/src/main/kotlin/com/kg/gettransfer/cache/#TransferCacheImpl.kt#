package com.kg.gettransfer.cache

import com.kg.gettransfer.cache.dao.TransferCachedDao

import com.kg.gettransfer.cache.mapper.TransferEntityMapper

import com.kg.gettransfer.data.TransferCache

import com.kg.gettransfer.data.model.TransferEntity

import org.koin.standalone.inject
import org.koin.standalone.KoinComponent

class TransferCacheImpl: TransferCache, KoinComponent {
    private val db: CacheDatabase by inject()
    private val transferMapper: TransferEntityMapper by inject()

    override fun getTransfer(id: Long): TransferEntity? {
        val list = db.transferCachedDao().select(id)
        if(list.size == 0) return null
        return transferMapper.fromCached(list.first())
    }
    
    override fun insertTransfer(transfer: TransferEntity) = db.transferCachedDao().insert(listOf(transferMapper.toCached(transfer)))    
    override fun updateTransfer(transfer: TransferEntity) = db.transferCachedDao().update(transferMapper.toCached(transfer))
    
    override fun getTransfers() = db.transferCachedDao().selectAll().map { transferMapper.fromCached(it) }
    override fun setTransfers(transfers: List<TransferEntity>) = db.transferCachedDao().insert(transfers.map { transferMapper.toCached(it) })
    override fun clear() = db.transferCachedDao().deleteAll()
}
