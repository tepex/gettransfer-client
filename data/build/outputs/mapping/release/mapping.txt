com.getkeepsafe.relinker.R -> com.getkeepsafe.relinker.R:
    void <init>() -> <init>
com.kg.gettransfer.data.R -> com.kg.gettransfer.data.R:
    void <init>() -> <init>
com.kg.gettransfer.data.R$string -> com.kg.gettransfer.data.R$string:
    int app_name -> app_name
    void <init>() -> <init>
    void <clinit>() -> <clinit>
com.kg.gettransfer.data.model.AccountInfo -> com.kg.gettransfer.data.a.a:
    java.lang.String email -> a
    java.lang.String phone -> b
    java.lang.String locale -> c
    java.lang.String currency -> d
    java.lang.String distanceUnit -> e
    java.util.Date dateUpdated -> f
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date) -> <init>
    void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Date,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    java.lang.String realmGet$email() -> a
    void realmSet$email(java.lang.String) -> a
    java.lang.String realmGet$phone() -> b
    void realmSet$phone(java.lang.String) -> b
    java.lang.String realmGet$locale() -> c
    void realmSet$locale(java.lang.String) -> c
    java.lang.String realmGet$currency() -> d
    void realmSet$currency(java.lang.String) -> d
    java.lang.String realmGet$distanceUnit() -> e
    void realmSet$distanceUnit(java.lang.String) -> e
    java.util.Date realmGet$dateUpdated() -> f
    void realmSet$dateUpdated(java.util.Date) -> a
com.kg.gettransfer.data.model.Carrier -> com.kg.gettransfer.data.a.b:
    int id -> a
    java.lang.String title -> b
    java.lang.Boolean approved -> c
    int completedTransfers -> d
    io.realm.RealmList languages -> e
    com.kg.gettransfer.data.model.secondary.Rating rating -> f
    java.lang.String email -> g
    java.lang.String phone -> h
    java.lang.String alternatePhone -> i
    void <init>() -> <init>
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> a
    java.lang.Boolean realmGet$approved() -> c
    void realmSet$approved(java.lang.Boolean) -> a
    int realmGet$completedTransfers() -> d
    void realmSet$completedTransfers(int) -> b
    io.realm.RealmList realmGet$languages() -> e
    void realmSet$languages(io.realm.RealmList) -> a
    com.kg.gettransfer.data.model.secondary.Rating realmGet$rating() -> f
    void realmSet$rating(com.kg.gettransfer.data.model.secondary.Rating) -> a
    java.lang.String realmGet$email() -> g
    void realmSet$email(java.lang.String) -> b
    java.lang.String realmGet$phone() -> h
    void realmSet$phone(java.lang.String) -> c
    java.lang.String realmGet$alternatePhone() -> i
    void realmSet$alternatePhone(java.lang.String) -> d
com.kg.gettransfer.data.model.Config -> com.kg.gettransfer.data.a.c:
    int id -> a
    io.realm.RealmList availableLocales -> b
    java.lang.String preferredLocale -> c
    io.realm.RealmList supportedCurrencies -> d
    io.realm.RealmList supportedDistanceUnits -> e
    void <init>(int,io.realm.RealmList,java.lang.String,io.realm.RealmList,io.realm.RealmList) -> <init>
    void <init>(int,io.realm.RealmList,java.lang.String,io.realm.RealmList,io.realm.RealmList,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    io.realm.RealmList realmGet$availableLocales() -> b
    void realmSet$availableLocales(io.realm.RealmList) -> a
    java.lang.String realmGet$preferredLocale() -> c
    void realmSet$preferredLocale(java.lang.String) -> a
    io.realm.RealmList realmGet$supportedCurrencies() -> d
    void realmSet$supportedCurrencies(io.realm.RealmList) -> b
    io.realm.RealmList realmGet$supportedDistanceUnits() -> e
    void realmSet$supportedDistanceUnits(io.realm.RealmList) -> c
com.kg.gettransfer.data.model.Offer -> com.kg.gettransfer.data.a.d:
    int id -> a
    com.kg.gettransfer.data.model.secondary.Price price -> b
    java.lang.String status -> c
    com.kg.gettransfer.data.model.Carrier carrier -> d
    com.kg.gettransfer.data.model.Vehicle vehicle -> e
    java.lang.Boolean wifi -> f
    java.lang.Boolean refreshments -> g
    void <init>() -> <init>
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    com.kg.gettransfer.data.model.secondary.Price realmGet$price() -> b
    void realmSet$price(com.kg.gettransfer.data.model.secondary.Price) -> a
    java.lang.String realmGet$status() -> c
    void realmSet$status(java.lang.String) -> a
    com.kg.gettransfer.data.model.Carrier realmGet$carrier() -> d
    void realmSet$carrier(com.kg.gettransfer.data.model.Carrier) -> a
    com.kg.gettransfer.data.model.Vehicle realmGet$vehicle() -> e
    void realmSet$vehicle(com.kg.gettransfer.data.model.Vehicle) -> a
    java.lang.Boolean realmGet$wifi() -> f
    void realmSet$wifi(java.lang.Boolean) -> a
    java.lang.Boolean realmGet$refreshments() -> g
    void realmSet$refreshments(java.lang.Boolean) -> b
com.kg.gettransfer.data.model.Transfer -> com.kg.gettransfer.data.a.e:
    int id -> a
    java.util.Date updated -> b
    boolean isActive -> c
    com.kg.gettransfer.data.model.secondary.Location from -> d
    com.kg.gettransfer.data.model.secondary.Location to -> e
    java.lang.Integer hireDuration -> f
    java.lang.Integer routeDistance -> g
    java.lang.Integer routeDuration -> h
    java.lang.String status -> i
    boolean bookNow -> j
    com.kg.gettransfer.data.model.secondary.ZonedDate dateTo -> k
    com.kg.gettransfer.data.model.secondary.ZonedDate dateReturn -> l
    java.util.Date dateRefund -> m
    int pax -> n
    java.lang.String nameSign -> o
    io.realm.RealmList transportTypes -> p
    java.lang.String childSeats -> q
    java.lang.String comment -> r
    java.lang.String flightNumber -> s
    int offersCount -> t
    java.util.Date offersChangedDate -> u
    long offersTriedToUpdateDate -> v
    long offersUpdatedDate -> w
    java.lang.Integer relevantCarrierProfilesCount -> x
    java.lang.String malinaCard -> y
    io.realm.RealmList offers -> z
    void <init>() -> <init>
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    java.util.Date realmGet$updated() -> b
    void realmSet$updated(java.util.Date) -> a
    boolean realmGet$isActive() -> c
    void realmSet$isActive(boolean) -> a
    com.kg.gettransfer.data.model.secondary.Location realmGet$from() -> d
    void realmSet$from(com.kg.gettransfer.data.model.secondary.Location) -> a
    com.kg.gettransfer.data.model.secondary.Location realmGet$to() -> e
    void realmSet$to(com.kg.gettransfer.data.model.secondary.Location) -> b
    java.lang.Integer realmGet$hireDuration() -> f
    void realmSet$hireDuration(java.lang.Integer) -> a
    java.lang.Integer realmGet$routeDistance() -> g
    void realmSet$routeDistance(java.lang.Integer) -> b
    java.lang.Integer realmGet$routeDuration() -> h
    void realmSet$routeDuration(java.lang.Integer) -> c
    java.lang.String realmGet$status() -> i
    void realmSet$status(java.lang.String) -> a
    boolean realmGet$bookNow() -> j
    void realmSet$bookNow(boolean) -> b
    com.kg.gettransfer.data.model.secondary.ZonedDate realmGet$dateTo() -> k
    void realmSet$dateTo(com.kg.gettransfer.data.model.secondary.ZonedDate) -> a
    com.kg.gettransfer.data.model.secondary.ZonedDate realmGet$dateReturn() -> l
    void realmSet$dateReturn(com.kg.gettransfer.data.model.secondary.ZonedDate) -> b
    java.util.Date realmGet$dateRefund() -> m
    void realmSet$dateRefund(java.util.Date) -> b
    int realmGet$pax() -> n
    void realmSet$pax(int) -> b
    java.lang.String realmGet$nameSign() -> o
    void realmSet$nameSign(java.lang.String) -> b
    io.realm.RealmList realmGet$transportTypes() -> p
    void realmSet$transportTypes(io.realm.RealmList) -> a
    java.lang.String realmGet$childSeats() -> q
    void realmSet$childSeats(java.lang.String) -> c
    java.lang.String realmGet$comment() -> r
    void realmSet$comment(java.lang.String) -> d
    java.lang.String realmGet$flightNumber() -> s
    void realmSet$flightNumber(java.lang.String) -> e
    int realmGet$offersCount() -> t
    void realmSet$offersCount(int) -> c
    java.util.Date realmGet$offersChangedDate() -> u
    void realmSet$offersChangedDate(java.util.Date) -> c
    long realmGet$offersTriedToUpdateDate() -> v
    void realmSet$offersTriedToUpdateDate(long) -> a
    long realmGet$offersUpdatedDate() -> w
    void realmSet$offersUpdatedDate(long) -> b
    java.lang.Integer realmGet$relevantCarrierProfilesCount() -> x
    void realmSet$relevantCarrierProfilesCount(java.lang.Integer) -> d
    java.lang.String realmGet$malinaCard() -> y
    void realmSet$malinaCard(java.lang.String) -> f
    io.realm.RealmList realmGet$offers() -> z
    void realmSet$offers(io.realm.RealmList) -> b
com.kg.gettransfer.data.model.Vehicle -> com.kg.gettransfer.data.a.f:
    java.lang.String name -> a
    int year -> b
    java.lang.String transportTypeID -> c
    void <init>(java.lang.String,int,java.lang.String) -> <init>
    void <init>(java.lang.String,int,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    java.lang.String realmGet$name() -> a
    void realmSet$name(java.lang.String) -> a
    int realmGet$year() -> b
    void realmSet$year(int) -> a
    java.lang.String realmGet$transportTypeID() -> c
    void realmSet$transportTypeID(java.lang.String) -> b
com.kg.gettransfer.data.model.secondary.Currency -> com.kg.gettransfer.data.a.a.a:
    java.lang.String isoCode -> a
    java.lang.String symbol -> b
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    java.lang.String realmGet$isoCode() -> a
    void realmSet$isoCode(java.lang.String) -> a
    java.lang.String realmGet$symbol() -> b
    void realmSet$symbol(java.lang.String) -> b
com.kg.gettransfer.data.model.secondary.Language -> com.kg.gettransfer.data.a.a.b:
    java.lang.String code -> a
    java.lang.String title -> b
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    java.lang.String realmGet$code() -> a
    void realmSet$code(java.lang.String) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> b
com.kg.gettransfer.data.model.secondary.Locale -> com.kg.gettransfer.data.a.a.c:
    java.lang.String code -> a
    java.lang.String title -> b
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    java.lang.String realmGet$code() -> a
    void realmSet$code(java.lang.String) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> b
com.kg.gettransfer.data.model.secondary.Location -> com.kg.gettransfer.data.a.a.d:
    java.lang.String name -> a
    java.lang.String point -> b
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    java.lang.String realmGet$name() -> a
    void realmSet$name(java.lang.String) -> a
    java.lang.String realmGet$point() -> b
    void realmSet$point(java.lang.String) -> b
com.kg.gettransfer.data.model.secondary.Price -> com.kg.gettransfer.data.a.a.e:
    com.kg.gettransfer.data.model.secondary.PriceConverted base -> a
    java.lang.String p30 -> b
    java.lang.String p70 -> c
    com.kg.gettransfer.data.model.secondary.PriceConverted withoutDiscount -> d
    double amount -> e
    java.lang.String toString() -> toString
    void <init>() -> <init>
    com.kg.gettransfer.data.model.secondary.PriceConverted realmGet$base() -> a
    void realmSet$base(com.kg.gettransfer.data.model.secondary.PriceConverted) -> a
    java.lang.String realmGet$p30() -> b
    void realmSet$p30(java.lang.String) -> a
    java.lang.String realmGet$p70() -> c
    void realmSet$p70(java.lang.String) -> b
    com.kg.gettransfer.data.model.secondary.PriceConverted realmGet$withoutDiscount() -> d
    void realmSet$withoutDiscount(com.kg.gettransfer.data.model.secondary.PriceConverted) -> b
    double realmGet$amount() -> e
    void realmSet$amount(double) -> a
com.kg.gettransfer.data.model.secondary.PriceConverted -> com.kg.gettransfer.data.a.a.f:
    java.lang.String defaultCurrency -> a
    java.lang.String preferredCurrency -> b
    java.lang.String toString() -> toString
    void <init>(java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    java.lang.String realmGet$defaultCurrency() -> a
    void realmSet$defaultCurrency(java.lang.String) -> a
    java.lang.String realmGet$preferredCurrency() -> b
    void realmSet$preferredCurrency(java.lang.String) -> b
com.kg.gettransfer.data.model.secondary.Rating -> com.kg.gettransfer.data.a.a.g:
    int average -> a
    int vehicle -> b
    int drive -> c
    int fair -> d
    void <init>(int,int,int,int) -> <init>
    void <init>(int,int,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    int realmGet$average() -> a
    void realmSet$average(int) -> a
    int realmGet$vehicle() -> b
    void realmSet$vehicle(int) -> b
    int realmGet$drive() -> c
    void realmSet$drive(int) -> c
    int realmGet$fair() -> d
    void realmSet$fair(int) -> d
com.kg.gettransfer.data.model.secondary.TransportType -> com.kg.gettransfer.data.a.a.h:
    java.lang.String id -> a
    java.lang.String title -> b
    int paxMax -> c
    int luggageMax -> d
    void <init>(java.lang.String,java.lang.String,int,int) -> <init>
    void <init>(java.lang.String,java.lang.String,int,int,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    java.lang.String realmGet$id() -> a
    void realmSet$id(java.lang.String) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> b
    int realmGet$paxMax() -> c
    void realmSet$paxMax(int) -> a
    int realmGet$luggageMax() -> d
    void realmSet$luggageMax(int) -> b
com.kg.gettransfer.data.model.secondary.ZonedDate -> com.kg.gettransfer.data.a.a.i:
    java.util.Date date -> a
    java.lang.String zoneString -> b
    java.lang.String toString() -> toString
    void <init>(java.util.Date,java.lang.String) -> <init>
    void <init>(java.util.Date,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker) -> <init>
    void <init>() -> <init>
    java.util.Date realmGet$date() -> a
    void realmSet$date(java.util.Date) -> a
    java.lang.String realmGet$zoneString() -> b
    void realmSet$zoneString(java.lang.String) -> a
io.realm.DefaultRealmModule -> io.realm.DefaultRealmModule:
    void <init>() -> <init>
io.realm.DefaultRealmModuleMediator -> io.realm.DefaultRealmModuleMediator:
    java.util.Set MODEL_CLASSES -> a
    void <init>() -> <init>
    java.util.Map getExpectedObjectSchemaInfoMap() -> getExpectedObjectSchemaInfoMap
    io.realm.internal.ColumnInfo createColumnInfo(java.lang.Class,io.realm.internal.OsSchemaInfo) -> createColumnInfo
    java.lang.String getSimpleClassNameImpl(java.lang.Class) -> getSimpleClassNameImpl
    io.realm.RealmModel newInstance(java.lang.Class,java.lang.Object,io.realm.internal.Row,io.realm.internal.ColumnInfo,boolean,java.util.List) -> newInstance
    java.util.Set getModelClasses() -> getModelClasses
    io.realm.RealmModel copyOrUpdate(io.realm.Realm,io.realm.RealmModel,boolean,java.util.Map) -> copyOrUpdate
    void insert(io.realm.Realm,io.realm.RealmModel,java.util.Map) -> insert
    void insert(io.realm.Realm,java.util.Collection) -> insert
    void insertOrUpdate(io.realm.Realm,io.realm.RealmModel,java.util.Map) -> insertOrUpdate
    void insertOrUpdate(io.realm.Realm,java.util.Collection) -> insertOrUpdate
    io.realm.RealmModel createOrUpdateUsingJsonObject(java.lang.Class,io.realm.Realm,org.json.JSONObject,boolean) -> createOrUpdateUsingJsonObject
    io.realm.RealmModel createUsingJsonStream(java.lang.Class,io.realm.Realm,android.util.JsonReader) -> createUsingJsonStream
    io.realm.RealmModel createDetachedCopy(io.realm.RealmModel,int,java.util.Map) -> createDetachedCopy
    void <clinit>() -> <clinit>
    boolean transformerApplied() -> transformerApplied
io.realm.R -> io.realm.R:
    void <init>() -> <init>
io.realm.com_kg_gettransfer_data_model_AccountInfoRealmProxy -> io.realm.a:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_AccountInfoRealmProxy$AccountInfoColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    java.lang.String realmGet$email() -> a
    void realmSet$email(java.lang.String) -> a
    java.lang.String realmGet$phone() -> b
    void realmSet$phone(java.lang.String) -> b
    java.lang.String realmGet$locale() -> c
    void realmSet$locale(java.lang.String) -> c
    java.lang.String realmGet$currency() -> d
    void realmSet$currency(java.lang.String) -> d
    java.lang.String realmGet$distanceUnit() -> e
    void realmSet$distanceUnit(java.lang.String) -> e
    java.util.Date realmGet$dateUpdated() -> f
    void realmSet$dateUpdated(java.util.Date) -> a
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> h
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> g
    io.realm.com_kg_gettransfer_data_model_AccountInfoRealmProxy$AccountInfoColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.AccountInfo createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.AccountInfo createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.AccountInfo copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.AccountInfo,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.AccountInfo copy(io.realm.Realm,com.kg.gettransfer.data.model.AccountInfo,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.AccountInfo,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.AccountInfo,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.AccountInfo createDetachedCopy(com.kg.gettransfer.data.model.AccountInfo,int,int,java.util.Map) -> a
    com.kg.gettransfer.data.model.AccountInfo update(io.realm.Realm,com.kg.gettransfer.data.model.AccountInfo,com.kg.gettransfer.data.model.AccountInfo,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_AccountInfoRealmProxy$AccountInfoColumnInfo -> io.realm.a$a:
    long emailIndex -> a
    long phoneIndex -> b
    long localeIndex -> c
    long currencyIndex -> d
    long distanceUnitIndex -> e
    long dateUpdatedIndex -> f
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_AccountInfoRealmProxyInterface -> io.realm.b:
    java.lang.String realmGet$email() -> a
    void realmSet$email(java.lang.String) -> a
    java.lang.String realmGet$phone() -> b
    void realmSet$phone(java.lang.String) -> b
    java.lang.String realmGet$locale() -> c
    void realmSet$locale(java.lang.String) -> c
    java.lang.String realmGet$currency() -> d
    void realmSet$currency(java.lang.String) -> d
    java.lang.String realmGet$distanceUnit() -> e
    void realmSet$distanceUnit(java.lang.String) -> e
    java.util.Date realmGet$dateUpdated() -> f
    void realmSet$dateUpdated(java.util.Date) -> a
io.realm.com_kg_gettransfer_data_model_CarrierRealmProxy -> io.realm.c:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_CarrierRealmProxy$CarrierColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    io.realm.RealmList languagesRealmList -> d
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> a
    java.lang.Boolean realmGet$approved() -> c
    void realmSet$approved(java.lang.Boolean) -> a
    int realmGet$completedTransfers() -> d
    void realmSet$completedTransfers(int) -> b
    io.realm.RealmList realmGet$languages() -> e
    void realmSet$languages(io.realm.RealmList) -> a
    com.kg.gettransfer.data.model.secondary.Rating realmGet$rating() -> f
    void realmSet$rating(com.kg.gettransfer.data.model.secondary.Rating) -> a
    java.lang.String realmGet$email() -> g
    void realmSet$email(java.lang.String) -> b
    java.lang.String realmGet$phone() -> h
    void realmSet$phone(java.lang.String) -> c
    java.lang.String realmGet$alternatePhone() -> i
    void realmSet$alternatePhone(java.lang.String) -> d
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> k
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> j
    io.realm.com_kg_gettransfer_data_model_CarrierRealmProxy$CarrierColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.Carrier createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.Carrier createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.Carrier copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.Carrier,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.Carrier copy(io.realm.Realm,com.kg.gettransfer.data.model.Carrier,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.Carrier,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.Carrier,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.Carrier createDetachedCopy(com.kg.gettransfer.data.model.Carrier,int,int,java.util.Map) -> a
    com.kg.gettransfer.data.model.Carrier update(io.realm.Realm,com.kg.gettransfer.data.model.Carrier,com.kg.gettransfer.data.model.Carrier,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_CarrierRealmProxy$CarrierColumnInfo -> io.realm.c$a:
    long idIndex -> a
    long titleIndex -> b
    long approvedIndex -> c
    long completedTransfersIndex -> d
    long languagesIndex -> e
    long ratingIndex -> f
    long emailIndex -> g
    long phoneIndex -> h
    long alternatePhoneIndex -> i
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_CarrierRealmProxyInterface -> io.realm.d:
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> a
    java.lang.Boolean realmGet$approved() -> c
    void realmSet$approved(java.lang.Boolean) -> a
    int realmGet$completedTransfers() -> d
    void realmSet$completedTransfers(int) -> b
    io.realm.RealmList realmGet$languages() -> e
    void realmSet$languages(io.realm.RealmList) -> a
    com.kg.gettransfer.data.model.secondary.Rating realmGet$rating() -> f
    void realmSet$rating(com.kg.gettransfer.data.model.secondary.Rating) -> a
    java.lang.String realmGet$email() -> g
    void realmSet$email(java.lang.String) -> b
    java.lang.String realmGet$phone() -> h
    void realmSet$phone(java.lang.String) -> c
    java.lang.String realmGet$alternatePhone() -> i
    void realmSet$alternatePhone(java.lang.String) -> d
io.realm.com_kg_gettransfer_data_model_ConfigRealmProxy -> io.realm.e:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_ConfigRealmProxy$ConfigColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    io.realm.RealmList availableLocalesRealmList -> d
    io.realm.RealmList supportedCurrenciesRealmList -> e
    io.realm.RealmList supportedDistanceUnitsRealmList -> f
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    io.realm.RealmList realmGet$availableLocales() -> b
    void realmSet$availableLocales(io.realm.RealmList) -> a
    java.lang.String realmGet$preferredLocale() -> c
    void realmSet$preferredLocale(java.lang.String) -> a
    io.realm.RealmList realmGet$supportedCurrencies() -> d
    void realmSet$supportedCurrencies(io.realm.RealmList) -> b
    io.realm.RealmList realmGet$supportedDistanceUnits() -> e
    void realmSet$supportedDistanceUnits(io.realm.RealmList) -> c
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> g
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> f
    io.realm.com_kg_gettransfer_data_model_ConfigRealmProxy$ConfigColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.Config createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.Config createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.Config copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.Config,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.Config copy(io.realm.Realm,com.kg.gettransfer.data.model.Config,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.Config,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.Config,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.Config createDetachedCopy(com.kg.gettransfer.data.model.Config,int,int,java.util.Map) -> a
    com.kg.gettransfer.data.model.Config update(io.realm.Realm,com.kg.gettransfer.data.model.Config,com.kg.gettransfer.data.model.Config,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_ConfigRealmProxy$ConfigColumnInfo -> io.realm.e$a:
    long idIndex -> a
    long availableLocalesIndex -> b
    long preferredLocaleIndex -> c
    long supportedCurrenciesIndex -> d
    long supportedDistanceUnitsIndex -> e
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_ConfigRealmProxyInterface -> io.realm.f:
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    io.realm.RealmList realmGet$availableLocales() -> b
    void realmSet$availableLocales(io.realm.RealmList) -> a
    java.lang.String realmGet$preferredLocale() -> c
    void realmSet$preferredLocale(java.lang.String) -> a
    io.realm.RealmList realmGet$supportedCurrencies() -> d
    void realmSet$supportedCurrencies(io.realm.RealmList) -> b
    io.realm.RealmList realmGet$supportedDistanceUnits() -> e
    void realmSet$supportedDistanceUnits(io.realm.RealmList) -> c
io.realm.com_kg_gettransfer_data_model_OfferRealmProxy -> io.realm.g:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_OfferRealmProxy$OfferColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    com.kg.gettransfer.data.model.secondary.Price realmGet$price() -> b
    void realmSet$price(com.kg.gettransfer.data.model.secondary.Price) -> a
    java.lang.String realmGet$status() -> c
    void realmSet$status(java.lang.String) -> a
    com.kg.gettransfer.data.model.Carrier realmGet$carrier() -> d
    void realmSet$carrier(com.kg.gettransfer.data.model.Carrier) -> a
    com.kg.gettransfer.data.model.Vehicle realmGet$vehicle() -> e
    void realmSet$vehicle(com.kg.gettransfer.data.model.Vehicle) -> a
    java.lang.Boolean realmGet$wifi() -> f
    void realmSet$wifi(java.lang.Boolean) -> a
    java.lang.Boolean realmGet$refreshments() -> g
    void realmSet$refreshments(java.lang.Boolean) -> b
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> i
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> h
    io.realm.com_kg_gettransfer_data_model_OfferRealmProxy$OfferColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.Offer createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.Offer createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.Offer copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.Offer,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.Offer copy(io.realm.Realm,com.kg.gettransfer.data.model.Offer,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.Offer,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.Offer,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.Offer createDetachedCopy(com.kg.gettransfer.data.model.Offer,int,int,java.util.Map) -> a
    com.kg.gettransfer.data.model.Offer update(io.realm.Realm,com.kg.gettransfer.data.model.Offer,com.kg.gettransfer.data.model.Offer,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_OfferRealmProxy$OfferColumnInfo -> io.realm.g$a:
    long idIndex -> a
    long priceIndex -> b
    long statusIndex -> c
    long carrierIndex -> d
    long vehicleIndex -> e
    long wifiIndex -> f
    long refreshmentsIndex -> g
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_OfferRealmProxyInterface -> io.realm.h:
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    com.kg.gettransfer.data.model.secondary.Price realmGet$price() -> b
    void realmSet$price(com.kg.gettransfer.data.model.secondary.Price) -> a
    java.lang.String realmGet$status() -> c
    void realmSet$status(java.lang.String) -> a
    com.kg.gettransfer.data.model.Carrier realmGet$carrier() -> d
    void realmSet$carrier(com.kg.gettransfer.data.model.Carrier) -> a
    com.kg.gettransfer.data.model.Vehicle realmGet$vehicle() -> e
    void realmSet$vehicle(com.kg.gettransfer.data.model.Vehicle) -> a
    java.lang.Boolean realmGet$wifi() -> f
    void realmSet$wifi(java.lang.Boolean) -> a
    java.lang.Boolean realmGet$refreshments() -> g
    void realmSet$refreshments(java.lang.Boolean) -> b
io.realm.com_kg_gettransfer_data_model_TransferRealmProxy -> io.realm.i:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_TransferRealmProxy$TransferColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    io.realm.RealmList transportTypesRealmList -> d
    io.realm.RealmList offersRealmList -> e
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    java.util.Date realmGet$updated() -> b
    void realmSet$updated(java.util.Date) -> a
    boolean realmGet$isActive() -> c
    void realmSet$isActive(boolean) -> a
    com.kg.gettransfer.data.model.secondary.Location realmGet$from() -> d
    void realmSet$from(com.kg.gettransfer.data.model.secondary.Location) -> a
    com.kg.gettransfer.data.model.secondary.Location realmGet$to() -> e
    void realmSet$to(com.kg.gettransfer.data.model.secondary.Location) -> b
    java.lang.Integer realmGet$hireDuration() -> f
    void realmSet$hireDuration(java.lang.Integer) -> a
    java.lang.Integer realmGet$routeDistance() -> g
    void realmSet$routeDistance(java.lang.Integer) -> b
    java.lang.Integer realmGet$routeDuration() -> h
    void realmSet$routeDuration(java.lang.Integer) -> c
    java.lang.String realmGet$status() -> i
    void realmSet$status(java.lang.String) -> a
    boolean realmGet$bookNow() -> j
    void realmSet$bookNow(boolean) -> b
    com.kg.gettransfer.data.model.secondary.ZonedDate realmGet$dateTo() -> k
    void realmSet$dateTo(com.kg.gettransfer.data.model.secondary.ZonedDate) -> a
    com.kg.gettransfer.data.model.secondary.ZonedDate realmGet$dateReturn() -> l
    void realmSet$dateReturn(com.kg.gettransfer.data.model.secondary.ZonedDate) -> b
    java.util.Date realmGet$dateRefund() -> m
    void realmSet$dateRefund(java.util.Date) -> b
    int realmGet$pax() -> n
    void realmSet$pax(int) -> b
    java.lang.String realmGet$nameSign() -> o
    void realmSet$nameSign(java.lang.String) -> b
    io.realm.RealmList realmGet$transportTypes() -> p
    void realmSet$transportTypes(io.realm.RealmList) -> a
    java.lang.String realmGet$childSeats() -> q
    void realmSet$childSeats(java.lang.String) -> c
    java.lang.String realmGet$comment() -> r
    void realmSet$comment(java.lang.String) -> d
    java.lang.String realmGet$flightNumber() -> s
    void realmSet$flightNumber(java.lang.String) -> e
    int realmGet$offersCount() -> t
    void realmSet$offersCount(int) -> c
    java.util.Date realmGet$offersChangedDate() -> u
    void realmSet$offersChangedDate(java.util.Date) -> c
    long realmGet$offersTriedToUpdateDate() -> v
    void realmSet$offersTriedToUpdateDate(long) -> a
    long realmGet$offersUpdatedDate() -> w
    void realmSet$offersUpdatedDate(long) -> b
    java.lang.Integer realmGet$relevantCarrierProfilesCount() -> x
    void realmSet$relevantCarrierProfilesCount(java.lang.Integer) -> d
    java.lang.String realmGet$malinaCard() -> y
    void realmSet$malinaCard(java.lang.String) -> f
    io.realm.RealmList realmGet$offers() -> z
    void realmSet$offers(io.realm.RealmList) -> b
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> B
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> A
    io.realm.com_kg_gettransfer_data_model_TransferRealmProxy$TransferColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.Transfer createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.Transfer createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.Transfer copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.Transfer,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.Transfer copy(io.realm.Realm,com.kg.gettransfer.data.model.Transfer,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.Transfer,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.Transfer,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.Transfer createDetachedCopy(com.kg.gettransfer.data.model.Transfer,int,int,java.util.Map) -> a
    com.kg.gettransfer.data.model.Transfer update(io.realm.Realm,com.kg.gettransfer.data.model.Transfer,com.kg.gettransfer.data.model.Transfer,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_TransferRealmProxy$TransferColumnInfo -> io.realm.i$a:
    long idIndex -> a
    long updatedIndex -> b
    long isActiveIndex -> c
    long fromIndex -> d
    long toIndex -> e
    long hireDurationIndex -> f
    long routeDistanceIndex -> g
    long routeDurationIndex -> h
    long statusIndex -> i
    long bookNowIndex -> j
    long dateToIndex -> k
    long dateReturnIndex -> l
    long dateRefundIndex -> m
    long paxIndex -> n
    long nameSignIndex -> o
    long transportTypesIndex -> p
    long childSeatsIndex -> q
    long commentIndex -> r
    long flightNumberIndex -> s
    long offersCountIndex -> t
    long offersChangedDateIndex -> u
    long offersTriedToUpdateDateIndex -> v
    long offersUpdatedDateIndex -> w
    long relevantCarrierProfilesCountIndex -> x
    long malinaCardIndex -> y
    long offersIndex -> z
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_TransferRealmProxyInterface -> io.realm.j:
    int realmGet$id() -> a
    void realmSet$id(int) -> a
    java.util.Date realmGet$updated() -> b
    void realmSet$updated(java.util.Date) -> a
    boolean realmGet$isActive() -> c
    void realmSet$isActive(boolean) -> a
    com.kg.gettransfer.data.model.secondary.Location realmGet$from() -> d
    void realmSet$from(com.kg.gettransfer.data.model.secondary.Location) -> a
    com.kg.gettransfer.data.model.secondary.Location realmGet$to() -> e
    void realmSet$to(com.kg.gettransfer.data.model.secondary.Location) -> b
    java.lang.Integer realmGet$hireDuration() -> f
    void realmSet$hireDuration(java.lang.Integer) -> a
    java.lang.Integer realmGet$routeDistance() -> g
    void realmSet$routeDistance(java.lang.Integer) -> b
    java.lang.Integer realmGet$routeDuration() -> h
    void realmSet$routeDuration(java.lang.Integer) -> c
    java.lang.String realmGet$status() -> i
    void realmSet$status(java.lang.String) -> a
    boolean realmGet$bookNow() -> j
    void realmSet$bookNow(boolean) -> b
    com.kg.gettransfer.data.model.secondary.ZonedDate realmGet$dateTo() -> k
    void realmSet$dateTo(com.kg.gettransfer.data.model.secondary.ZonedDate) -> a
    com.kg.gettransfer.data.model.secondary.ZonedDate realmGet$dateReturn() -> l
    void realmSet$dateReturn(com.kg.gettransfer.data.model.secondary.ZonedDate) -> b
    java.util.Date realmGet$dateRefund() -> m
    void realmSet$dateRefund(java.util.Date) -> b
    int realmGet$pax() -> n
    void realmSet$pax(int) -> b
    java.lang.String realmGet$nameSign() -> o
    void realmSet$nameSign(java.lang.String) -> b
    io.realm.RealmList realmGet$transportTypes() -> p
    void realmSet$transportTypes(io.realm.RealmList) -> a
    java.lang.String realmGet$childSeats() -> q
    void realmSet$childSeats(java.lang.String) -> c
    java.lang.String realmGet$comment() -> r
    void realmSet$comment(java.lang.String) -> d
    java.lang.String realmGet$flightNumber() -> s
    void realmSet$flightNumber(java.lang.String) -> e
    int realmGet$offersCount() -> t
    void realmSet$offersCount(int) -> c
    java.util.Date realmGet$offersChangedDate() -> u
    void realmSet$offersChangedDate(java.util.Date) -> c
    long realmGet$offersTriedToUpdateDate() -> v
    void realmSet$offersTriedToUpdateDate(long) -> a
    long realmGet$offersUpdatedDate() -> w
    void realmSet$offersUpdatedDate(long) -> b
    java.lang.Integer realmGet$relevantCarrierProfilesCount() -> x
    void realmSet$relevantCarrierProfilesCount(java.lang.Integer) -> d
    java.lang.String realmGet$malinaCard() -> y
    void realmSet$malinaCard(java.lang.String) -> f
    io.realm.RealmList realmGet$offers() -> z
    void realmSet$offers(io.realm.RealmList) -> b
io.realm.com_kg_gettransfer_data_model_VehicleRealmProxy -> io.realm.k:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_VehicleRealmProxy$VehicleColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    java.lang.String realmGet$name() -> a
    void realmSet$name(java.lang.String) -> a
    int realmGet$year() -> b
    void realmSet$year(int) -> a
    java.lang.String realmGet$transportTypeID() -> c
    void realmSet$transportTypeID(java.lang.String) -> b
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> e
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> d
    io.realm.com_kg_gettransfer_data_model_VehicleRealmProxy$VehicleColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.Vehicle createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.Vehicle createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.Vehicle copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.Vehicle,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.Vehicle copy(io.realm.Realm,com.kg.gettransfer.data.model.Vehicle,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.Vehicle,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.Vehicle,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.Vehicle createDetachedCopy(com.kg.gettransfer.data.model.Vehicle,int,int,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_VehicleRealmProxy$VehicleColumnInfo -> io.realm.k$a:
    long nameIndex -> a
    long yearIndex -> b
    long transportTypeIDIndex -> c
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_VehicleRealmProxyInterface -> io.realm.l:
    java.lang.String realmGet$name() -> a
    void realmSet$name(java.lang.String) -> a
    int realmGet$year() -> b
    void realmSet$year(int) -> a
    java.lang.String realmGet$transportTypeID() -> c
    void realmSet$transportTypeID(java.lang.String) -> b
io.realm.com_kg_gettransfer_data_model_secondary_CurrencyRealmProxy -> io.realm.m:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_secondary_CurrencyRealmProxy$CurrencyColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    java.lang.String realmGet$isoCode() -> a
    void realmSet$isoCode(java.lang.String) -> a
    java.lang.String realmGet$symbol() -> b
    void realmSet$symbol(java.lang.String) -> b
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> d
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> c
    io.realm.com_kg_gettransfer_data_model_secondary_CurrencyRealmProxy$CurrencyColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.secondary.Currency createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.secondary.Currency createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.secondary.Currency copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Currency,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.secondary.Currency copy(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Currency,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Currency,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Currency,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.secondary.Currency createDetachedCopy(com.kg.gettransfer.data.model.secondary.Currency,int,int,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_secondary_CurrencyRealmProxy$CurrencyColumnInfo -> io.realm.m$a:
    long isoCodeIndex -> a
    long symbolIndex -> b
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_secondary_CurrencyRealmProxyInterface -> io.realm.n:
    java.lang.String realmGet$isoCode() -> a
    void realmSet$isoCode(java.lang.String) -> a
    java.lang.String realmGet$symbol() -> b
    void realmSet$symbol(java.lang.String) -> b
io.realm.com_kg_gettransfer_data_model_secondary_LanguageRealmProxy -> io.realm.o:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_secondary_LanguageRealmProxy$LanguageColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    java.lang.String realmGet$code() -> a
    void realmSet$code(java.lang.String) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> b
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> d
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> c
    io.realm.com_kg_gettransfer_data_model_secondary_LanguageRealmProxy$LanguageColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.secondary.Language createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.secondary.Language createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.secondary.Language copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Language,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.secondary.Language copy(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Language,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Language,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Language,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.secondary.Language createDetachedCopy(com.kg.gettransfer.data.model.secondary.Language,int,int,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_secondary_LanguageRealmProxy$LanguageColumnInfo -> io.realm.o$a:
    long codeIndex -> a
    long titleIndex -> b
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_secondary_LanguageRealmProxyInterface -> io.realm.p:
    java.lang.String realmGet$code() -> a
    void realmSet$code(java.lang.String) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> b
io.realm.com_kg_gettransfer_data_model_secondary_LocaleRealmProxy -> io.realm.q:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_secondary_LocaleRealmProxy$LocaleColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    java.lang.String realmGet$code() -> a
    void realmSet$code(java.lang.String) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> b
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> d
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> c
    io.realm.com_kg_gettransfer_data_model_secondary_LocaleRealmProxy$LocaleColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.secondary.Locale createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.secondary.Locale createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.secondary.Locale copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Locale,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.secondary.Locale copy(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Locale,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Locale,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Locale,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.secondary.Locale createDetachedCopy(com.kg.gettransfer.data.model.secondary.Locale,int,int,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_secondary_LocaleRealmProxy$LocaleColumnInfo -> io.realm.q$a:
    long codeIndex -> a
    long titleIndex -> b
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_secondary_LocaleRealmProxyInterface -> io.realm.s:
    java.lang.String realmGet$code() -> a
    void realmSet$code(java.lang.String) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> b
io.realm.com_kg_gettransfer_data_model_secondary_LocationRealmProxy -> io.realm.t:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_secondary_LocationRealmProxy$LocationColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    java.lang.String realmGet$name() -> a
    void realmSet$name(java.lang.String) -> a
    java.lang.String realmGet$point() -> b
    void realmSet$point(java.lang.String) -> b
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> d
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> c
    io.realm.com_kg_gettransfer_data_model_secondary_LocationRealmProxy$LocationColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.secondary.Location createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.secondary.Location createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.secondary.Location copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Location,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.secondary.Location copy(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Location,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Location,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Location,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.secondary.Location createDetachedCopy(com.kg.gettransfer.data.model.secondary.Location,int,int,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_secondary_LocationRealmProxy$LocationColumnInfo -> io.realm.t$a:
    long nameIndex -> a
    long pointIndex -> b
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_secondary_LocationRealmProxyInterface -> io.realm.u:
    java.lang.String realmGet$name() -> a
    void realmSet$name(java.lang.String) -> a
    java.lang.String realmGet$point() -> b
    void realmSet$point(java.lang.String) -> b
io.realm.com_kg_gettransfer_data_model_secondary_PriceConvertedRealmProxy -> io.realm.v:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_secondary_PriceConvertedRealmProxy$PriceConvertedColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    java.lang.String realmGet$defaultCurrency() -> a
    void realmSet$defaultCurrency(java.lang.String) -> a
    java.lang.String realmGet$preferredCurrency() -> b
    void realmSet$preferredCurrency(java.lang.String) -> b
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> d
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> c
    io.realm.com_kg_gettransfer_data_model_secondary_PriceConvertedRealmProxy$PriceConvertedColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.secondary.PriceConverted createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.secondary.PriceConverted createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.secondary.PriceConverted copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.PriceConverted,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.secondary.PriceConverted copy(io.realm.Realm,com.kg.gettransfer.data.model.secondary.PriceConverted,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.secondary.PriceConverted,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.PriceConverted,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.secondary.PriceConverted createDetachedCopy(com.kg.gettransfer.data.model.secondary.PriceConverted,int,int,java.util.Map) -> a
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_secondary_PriceConvertedRealmProxy$PriceConvertedColumnInfo -> io.realm.v$a:
    long defaultCurrencyIndex -> a
    long preferredCurrencyIndex -> b
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_secondary_PriceConvertedRealmProxyInterface -> io.realm.w:
    java.lang.String realmGet$defaultCurrency() -> a
    void realmSet$defaultCurrency(java.lang.String) -> a
    java.lang.String realmGet$preferredCurrency() -> b
    void realmSet$preferredCurrency(java.lang.String) -> b
io.realm.com_kg_gettransfer_data_model_secondary_PriceRealmProxy -> io.realm.x:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_secondary_PriceRealmProxy$PriceColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    com.kg.gettransfer.data.model.secondary.PriceConverted realmGet$base() -> a
    void realmSet$base(com.kg.gettransfer.data.model.secondary.PriceConverted) -> a
    java.lang.String realmGet$p30() -> b
    void realmSet$p30(java.lang.String) -> a
    java.lang.String realmGet$p70() -> c
    void realmSet$p70(java.lang.String) -> b
    com.kg.gettransfer.data.model.secondary.PriceConverted realmGet$withoutDiscount() -> d
    void realmSet$withoutDiscount(com.kg.gettransfer.data.model.secondary.PriceConverted) -> b
    double realmGet$amount() -> e
    void realmSet$amount(double) -> a
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> g
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> f
    io.realm.com_kg_gettransfer_data_model_secondary_PriceRealmProxy$PriceColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.secondary.Price createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.secondary.Price createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.secondary.Price copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Price,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.secondary.Price copy(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Price,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Price,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Price,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.secondary.Price createDetachedCopy(com.kg.gettransfer.data.model.secondary.Price,int,int,java.util.Map) -> a
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_secondary_PriceRealmProxy$PriceColumnInfo -> io.realm.x$a:
    long baseIndex -> a
    long p30Index -> b
    long p70Index -> c
    long withoutDiscountIndex -> d
    long amountIndex -> e
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_secondary_PriceRealmProxyInterface -> io.realm.y:
    com.kg.gettransfer.data.model.secondary.PriceConverted realmGet$base() -> a
    void realmSet$base(com.kg.gettransfer.data.model.secondary.PriceConverted) -> a
    java.lang.String realmGet$p30() -> b
    void realmSet$p30(java.lang.String) -> a
    java.lang.String realmGet$p70() -> c
    void realmSet$p70(java.lang.String) -> b
    com.kg.gettransfer.data.model.secondary.PriceConverted realmGet$withoutDiscount() -> d
    void realmSet$withoutDiscount(com.kg.gettransfer.data.model.secondary.PriceConverted) -> b
    double realmGet$amount() -> e
    void realmSet$amount(double) -> a
io.realm.com_kg_gettransfer_data_model_secondary_RatingRealmProxy -> io.realm.z:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_secondary_RatingRealmProxy$RatingColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    int realmGet$average() -> a
    void realmSet$average(int) -> a
    int realmGet$vehicle() -> b
    void realmSet$vehicle(int) -> b
    int realmGet$drive() -> c
    void realmSet$drive(int) -> c
    int realmGet$fair() -> d
    void realmSet$fair(int) -> d
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> f
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> e
    io.realm.com_kg_gettransfer_data_model_secondary_RatingRealmProxy$RatingColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.secondary.Rating createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.secondary.Rating createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.secondary.Rating copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Rating,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.secondary.Rating copy(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Rating,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Rating,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.Rating,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.secondary.Rating createDetachedCopy(com.kg.gettransfer.data.model.secondary.Rating,int,int,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_secondary_RatingRealmProxy$RatingColumnInfo -> io.realm.z$a:
    long averageIndex -> a
    long vehicleIndex -> b
    long driveIndex -> c
    long fairIndex -> d
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_secondary_RatingRealmProxyInterface -> io.realm.aa:
    int realmGet$average() -> a
    void realmSet$average(int) -> a
    int realmGet$vehicle() -> b
    void realmSet$vehicle(int) -> b
    int realmGet$drive() -> c
    void realmSet$drive(int) -> c
    int realmGet$fair() -> d
    void realmSet$fair(int) -> d
io.realm.com_kg_gettransfer_data_model_secondary_TransportTypeRealmProxy -> io.realm.ab:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_secondary_TransportTypeRealmProxy$TransportTypeColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    java.lang.String realmGet$id() -> a
    void realmSet$id(java.lang.String) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> b
    int realmGet$paxMax() -> c
    void realmSet$paxMax(int) -> a
    int realmGet$luggageMax() -> d
    void realmSet$luggageMax(int) -> b
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> f
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> e
    io.realm.com_kg_gettransfer_data_model_secondary_TransportTypeRealmProxy$TransportTypeColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.secondary.TransportType createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.secondary.TransportType createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.secondary.TransportType copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.TransportType,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.secondary.TransportType copy(io.realm.Realm,com.kg.gettransfer.data.model.secondary.TransportType,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.secondary.TransportType,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.TransportType,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.secondary.TransportType createDetachedCopy(com.kg.gettransfer.data.model.secondary.TransportType,int,int,java.util.Map) -> a
    com.kg.gettransfer.data.model.secondary.TransportType update(io.realm.Realm,com.kg.gettransfer.data.model.secondary.TransportType,com.kg.gettransfer.data.model.secondary.TransportType,java.util.Map) -> a
    java.lang.String toString() -> toString
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_secondary_TransportTypeRealmProxy$TransportTypeColumnInfo -> io.realm.ab$a:
    long idIndex -> a
    long titleIndex -> b
    long paxMaxIndex -> c
    long luggageMaxIndex -> d
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_secondary_TransportTypeRealmProxyInterface -> io.realm.ac:
    java.lang.String realmGet$id() -> a
    void realmSet$id(java.lang.String) -> a
    java.lang.String realmGet$title() -> b
    void realmSet$title(java.lang.String) -> b
    int realmGet$paxMax() -> c
    void realmSet$paxMax(int) -> a
    int realmGet$luggageMax() -> d
    void realmSet$luggageMax(int) -> b
io.realm.com_kg_gettransfer_data_model_secondary_ZonedDateRealmProxy -> io.realm.ad:
    io.realm.internal.OsObjectSchemaInfo expectedObjectSchemaInfo -> a
    io.realm.com_kg_gettransfer_data_model_secondary_ZonedDateRealmProxy$ZonedDateColumnInfo columnInfo -> b
    io.realm.ProxyState proxyState -> c
    void <init>() -> <init>
    void realm$injectObjectContext() -> realm$injectObjectContext
    java.util.Date realmGet$date() -> a
    void realmSet$date(java.util.Date) -> a
    java.lang.String realmGet$zoneString() -> b
    void realmSet$zoneString(java.lang.String) -> a
    io.realm.internal.OsObjectSchemaInfo createExpectedObjectSchemaInfo() -> d
    io.realm.internal.OsObjectSchemaInfo getExpectedObjectSchemaInfo() -> c
    io.realm.com_kg_gettransfer_data_model_secondary_ZonedDateRealmProxy$ZonedDateColumnInfo createColumnInfo(io.realm.internal.OsSchemaInfo) -> a
    com.kg.gettransfer.data.model.secondary.ZonedDate createOrUpdateUsingJsonObject(io.realm.Realm,org.json.JSONObject,boolean) -> a
    com.kg.gettransfer.data.model.secondary.ZonedDate createUsingJsonStream(io.realm.Realm,android.util.JsonReader) -> a
    com.kg.gettransfer.data.model.secondary.ZonedDate copyOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.ZonedDate,boolean,java.util.Map) -> a
    com.kg.gettransfer.data.model.secondary.ZonedDate copy(io.realm.Realm,com.kg.gettransfer.data.model.secondary.ZonedDate,boolean,java.util.Map) -> b
    long insert(io.realm.Realm,com.kg.gettransfer.data.model.secondary.ZonedDate,java.util.Map) -> a
    void insert(io.realm.Realm,java.util.Iterator,java.util.Map) -> a
    long insertOrUpdate(io.realm.Realm,com.kg.gettransfer.data.model.secondary.ZonedDate,java.util.Map) -> b
    void insertOrUpdate(io.realm.Realm,java.util.Iterator,java.util.Map) -> b
    com.kg.gettransfer.data.model.secondary.ZonedDate createDetachedCopy(com.kg.gettransfer.data.model.secondary.ZonedDate,int,int,java.util.Map) -> a
    io.realm.ProxyState realmGet$proxyState() -> realmGet$proxyState
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void <clinit>() -> <clinit>
io.realm.com_kg_gettransfer_data_model_secondary_ZonedDateRealmProxy$ZonedDateColumnInfo -> io.realm.ad$a:
    long dateIndex -> a
    long zoneStringIndex -> b
    void <init>(io.realm.internal.OsSchemaInfo) -> <init>
    void <init>(io.realm.internal.ColumnInfo,boolean) -> <init>
    io.realm.internal.ColumnInfo copy(boolean) -> copy
    void copy(io.realm.internal.ColumnInfo,io.realm.internal.ColumnInfo) -> copy
io.realm.com_kg_gettransfer_data_model_secondary_ZonedDateRealmProxyInterface -> io.realm.ae:
    java.util.Date realmGet$date() -> a
    void realmSet$date(java.util.Date) -> a
    java.lang.String realmGet$zoneString() -> b
    void realmSet$zoneString(java.lang.String) -> a
io.realm.kotlin.R -> io.realm.kotlin.R:
    void <init>() -> <init>
io.realm.kotlin.R$string -> io.realm.kotlin.R$string:
    int app_name -> app_name
    void <init>() -> <init>
    void <clinit>() -> <clinit>
timber.log.R -> timber.log.R:
    void <init>() -> <init>
