plugins {
    id "io.qameta.allure" version "2.5" // Latest Plugin Version
}

apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "kotlin-kapt"
apply plugin: "kotlinx-serialization"
apply plugin: "de.felixschulze.gradle.hockeyapp"
apply plugin: "io.sentry.android.gradle" // for Proguard"s mapping file
apply plugin: "androidx.navigation.safeargs.kotlin"

ext {
    multidex_version           = "2.0.1"
    constraint_layout_version  = "2.0.0-beta1" // don't update version until content_payment_successful.xml preview will be work fine
    moxy_version               = "2.0.2"
    cicerone_version           = "5.0.0"
    circle_indicator_version   = "1.2.2"
    hockey_version             = "5.2.0"
    firebase_core_version      = "16.0.6"
    firebase_iid_version       = "17.0.4"
    firebase_messaging_version = "17.3.4"
    glide_version              = "4.9.0"
    slf4j_timber_version       = "1.0.1"
    socket_io_version          = "1.0.0"
    libphonenumber_version     = "8.9.14"
    appmetrica_version         = "3.6.4"
    facebook_version           = "4.38.1"
    leakcanary_version         = "2.0-beta-2"
    anko_version               = "0.10.8"
    flexbox_layout_version     = "1.0.0"
    pageindicator_version      = "1.0.2"
    sentry_version             = "1.7.23"
    appsflyer_version          = "4.8.19"
    installreferrer_version    = "1.0"
    life_cycle_version         = "1.1.1"
    easy_permissions_version   = "2.0.1"
    braintree_version          = "2.22.0" //don't update until migration to AndroidX
    drop_in_version            = "3.7.1"  //don't update until migration to AndroidX
    pinview_version            = "1.4.2"
    fb_shimmer_version         = "0.4.0"
    appmetrica_push            = "1.4.1"
    play_services              = "16.1.0"
    androidx_transition        = "1.2.0-rc01"
    webkit_version             = "1.0.0"
    appcompat_version          = "1.1.0"
    recyclerview_version       = "1.0.0"
    cardview_version           = "1.0.0"
    material_version           = "1.1.0-beta01"
    core_ktx_version           = "1.1.0"
    fragment_version           = "1.2.0-alpha02"
    fragment_ktx_version       = "1.2.0-alpha02"
    lifecycle_runtime_version  = "2.0.0"
    lifecycle_extensions_ver   = "2.0.0"
    maps_utils_version         = "0.5"
}

android {
    compileSdkVersion Integer.parseInt(project.ANDROID_BUILD_SDK_VERSION)
    buildToolsVersion project.ANDROID_BUILD_TOOLS_VERSION
    defaultConfig {
        minSdkVersion project.ANDROID_BUILD_MIN_SDK_VERSION
        targetSdkVersion project.ANDROID_BUILD_SDK_VERSION
        testInstrumentationRunner project.ANDROID_TEST_INSTRUMENTATION_RUNNER
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        disableEmptyStrategyCheck: 'true'
                ]
            }
        }
    }

    signingConfigs {
        config {
            def keystorePropertiesFile = rootProject.file("keystore.properties")
            if(keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                keyAlias keystoreProperties['KEY_ALIAS']
                keyPassword keystoreProperties['KEY_PASSWORD']
                storeFile file(keystoreProperties['STORE_FILE'])
                storePassword keystoreProperties['STORE_PASSWORD']

            }
        }
    }

    android {
        lintOptions {
            abortOnError false
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
            testLogging {
                events "STARTED", "PASSED", "FAILED", "SKIPPED"
            }
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            //applicationIdSuffix ".debug"
            minifyEnabled false
            debuggable true
            shrinkResources false
        }
    }

    flavorDimensions "type"

    productFlavors {
        dev {
            applicationId "com.kg.gettransfer"

            signingConfig signingConfigs.config

            versionCode getBuildNumber() as Integer
            versionName System.getenv("VERSION_NAME") ?: "2.0"

            manifestPlaceholders = [
                    hockeyAppId   : "1f061f58b7bd42c387ecd8681d30df48",
                    assetlinks    : "[{ \\\"include\\\": \\\"https://gtrbox.org/.well-known/assetlinks.json\\\" }]"
            ]

            dimension "type"
        }

        prod {
            applicationId "com.gettransfer"

            signingConfig signingConfigs.config

            versionCode getBuildNumber() as Integer
            versionName System.getenv("VERSION_NAME")

            manifestPlaceholders = [
                    hockeyAppId   : "62939f09f9e0489c8ada1c25d2f30d9d",
                    assetlinks    : "[{ \\\"include\\\": \\\"https://gettransfer.com/.well-known/assetlinks.json\\\" }]"
            ]

            dimension "type"
        }

        /* `prod` emulation for testing */
        home {
            applicationId "com.kg.gettransfer"

            signingConfig signingConfigs.config

            versionCode getBuildNumber() as Integer
            versionName "2.0"

            manifestPlaceholders = [
                    hockeyAppId   : "1f061f58b7bd42c387ecd8681d30df48",
            ]

            dimension "type"
        }
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
        test.java.srcDirs += "src/test/kotlin"
        androidTest.java.srcDirs += "src/androidTest/kotlin"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations {
    cleanedAnnotations
    compile.exclude group: "org.jetbrains" , module: "annotations"
}

androidExtensions {
    experimental = true
}

hockeyapp {
    apiToken = "7381bebd314d4f69b363cd29d4ce6b41" //api token with owner rights
    restoreAllowed = true // Enables restoring function for previous versions
    notes = generateChangeLog() // Generates default notes - feel free to change this
    buildServerUrl = System.getenv("JOB_URL") ?: "Unknown"
    repositoryUrl = System.getenv("GIT_URL") ?: "Unknown"
    variantToApplicationId = [
            devRelease:  "1f061f58b7bd42c387ecd8681d30df48",
            prodRelease:  "62939f09f9e0489c8ada1c25d2f30d9d",
    ]
    variantToReleaseType = [
            devRelease:  "2",
            prodRelease:  "1",
    ]
    mappingFileNameRegex="mapping.txt"
}

dependencies {
    implementation project(":domain")
    implementation project(":data")
    implementation project(":geo")
    implementation project(":prefs")
    implementation project(":remote")
    implementation project(":cache")
    implementation project(":encrypt")
    implementation libs.kotlin
    implementation libs.coroutines
    implementation libs.serialization
    implementation libs.koin_android

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.recyclerview:recyclerview:$recyclerview_version"
    implementation "androidx.cardview:cardview:$cardview_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.fragment:fragment:$fragment_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_ktx_version"

    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    implementation "androidx.multidex:multidex:$multidex_version"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_runtime_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extensions_ver"
    // Navigation
//    implementation "androidx.navigation:navigation-runtime-ktx:$nav_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    // Maps
    implementation libs.psLocation
    implementation libs.psPlaces
    implementation "com.google.android.gms:play-services-maps:$gms_version"
    implementation "com.google.maps.android:android-maps-utils:$maps_utils_version"
    // Gson
    implementation libs.gson
    // Moxy
    implementation "com.github.moxy-community:moxy:$moxy_version"
    implementation "com.github.moxy-community:moxy-androidx:$moxy_version"
    implementation "com.github.moxy-community:moxy-material:$moxy_version"
    kapt "com.github.moxy-community:moxy-compiler:$moxy_version"

    // Cicerone
    implementation "ru.terrakok.cicerone:cicerone:$cicerone_version"

    // Logger
    implementation libs.timber
    implementation "at.favre.lib:slf4j-timber:$slf4j_timber_version"

    // Hockey
    implementation "net.hockeyapp.android:HockeySDK:$hockey_version"

    //Firebase
    // https://firebase.google.com/support/release-notes/android
    implementation "com.google.firebase:firebase-core:$firebase_core_version"
    //implementation "com.google.firebase:firebase-iid:$firebase_iid_version"
    implementation "com.google.firebase:firebase-messaging:$firebase_messaging_version"

    //Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Socket.IO
    implementation "io.socket:socket.io-client:$socket_io_version"

    //AppMetrica
    implementation "com.yandex.android:mobmetricalib:$appmetrica_version"

    //Facebook
    implementation "com.facebook.android:facebook-core:$facebook_version"

    // Phone number code
    implementation "io.michaelrocks:libphonenumber-android:$libphonenumber_version"
    implementation "com.google.android:flexbox:$flexbox_layout_version"

    // LeakCanary
//    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
//    implementation "com.squareup.leakcanary:leakcanary-object-watcher-android:$leakcanary_version"

    //Anko
    implementation "org.jetbrains.anko:anko-commons:$anko_version"

    implementation "com.romandanylyk:pageindicatorview:$pageindicator_version"

    //sentry
    implementation "io.sentry:sentry-android:$sentry_version"

    //appsflyer
    implementation "com.appsflyer:af-android-sdk:$appsflyer_version@aar"
    implementation "com.android.installreferrer:installreferrer:$installreferrer_version"

    //EasyPermissions
    implementation "pub.devrel:easypermissions:$easy_permissions_version"

    //Braintree
    implementation "com.braintreepayments.api:braintree:$braintree_version"
    implementation "com.braintreepayments.api:drop-in:$drop_in_version"

    //PinEditText
    implementation "com.chaos.view:pinview:$pinview_version"

    // Shimmer loading effect
    implementation "com.facebook.shimmer:shimmer:$fb_shimmer_version"

    // AppMetrica Push
    implementation "com.yandex.android:mobmetricapushlib:$appmetrica_push"

    // Play services
    implementation "com.google.android.gms:play-services-base:$play_services"

    // Webkit
    implementation "androidx.webkit:webkit:$webkit_version"

    api("androidx.transition:transition:$androidx_transition")

    implementation libs.uiautomator
    // dependencies for Kasspresso
    implementation(libs.kaspresso) {
        transitive = false
    }

    testImplementation libs.coroutines_test
    testImplementation libs.koin_test
    testImplementation libs.kotlintest
    testImplementation libs.kotlintest_koin
    testImplementation libs.mockk
    testImplementation libs.slf4j_simple
    testImplementation libs.core_testing

    // Allure
    testImplementation libs.jupiter_api
    testRuntimeOnly libs.jupiter_engine

    androidTestImplementation libs.androidx_test_runner
    androidTestImplementation libs.androidx_test_rules
    //dependencies for ui tests
    androidTestImplementation libs.androidx_text_ext_truth
    androidTestImplementation libs.androidx_text_ext_junit
    //dependencies for espresso
    androidTestImplementation libs.espresso_core
    //dependencies for Kakao
    androidTestImplementation libs.kakao
    // for web
    androidTestImplementation libs.espresso_web
    androidTestImplementation(libs.espresso_contrib) {
        exclude group: "com.android.support", module: "appcompat"
        exclude module: "support-annotations"
        exclude module: "support-v4"
        exclude module: "support-v13"
        exclude module: "recyclerview-v7"
        exclude module: "appcompat-v7"
    }

}

allure {
    autoconfigure = true
    version = '2.7.0'  // Latest Allure Version

    useJUnit5 {
        version = '2.7.0' // Latest Allure Version
    }
}

def getBuildNumber() {
    return System.getenv("BUILD_NUMBER") ?: "1"
}

def getVersionName() {
    return System.getenv("VERSION_NAME") ?: "1.0"
}

def generateChangeLog() {
    def changelog = "  \nbranch: " + System.getenv("GIT_BRANCH") ?: "Unknown"
    changelog += "  \ncommit: " + System.getenv("GIT_COMMIT") ?: "Unknown"
    changelog += "  \n\njob name: " + System.getenv("JOB_NAME") ?: "Unknown"
    changelog += "  \nstarted by: " + System.getenv("BUILD_USER") ?: "Unknown"
    changelog += "  \nbuild number: " + System.getenv("BUILD_NUMBER") ?: "Unknown"
    println changelog
    return changelog
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.getkeepsafe.dexcount'
